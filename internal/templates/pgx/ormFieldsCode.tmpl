{{define "ormFieldsCodePgx"}}
{{if .BuildTags}}
//go:build {{.BuildTags}}

{{end}}// Code generated by sqlc. DO NOT EDIT.
{{if not .OmitSqlcVersion}}// versions:
//   sqlc {{.SqlcVersion}}
{{end}}
// FT - field templater
// F - field
// FC - filed clause
// FCT - filed clause templater
// FUT - field update templater
// FV - field value

package {{.Package}}
{{ if hasImports .SourceName }}
import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{end}}

type ormQueryClause[T ormFieldAlias] interface {
   mustOrmQueryClause()
   build(ta ormTableAlias) (string, []any)
}

type ormUpdateSetter interface {
    mustOrmUpdateSetter()
    build(ta ormTableAlias) (string, []any)
}


type (
    whereClause[T ormFieldAlias] struct {
        field T
        operator string
        val []any
    }
    whereRawSqlClause[T ormFieldAlias] struct {
        field T
        operator string
        rawSql string
        val []any
    }
    whereSubQClause[T ormFieldAlias] struct {
        field T
        operator string
        subQ ormQuery
    }
    whereAliasClause[T ormFieldAlias] struct {
        field T
        alias ormTableAlias
        aliasedField ormFieldAlias
    }

    fieldSetter[T ormFieldAlias, V any] struct {
        field T
        val V
    }
    fieldsSubQSetter[T ormFieldAlias] struct {
        field T
        subQ ormQuery
    }
    fieldsRawQSetter[T ormFieldAlias] struct {
        field T
        rawSql string
        val []any
    }
)

func (b *whereClause[T]) mustOrmQueryClause() {}
func (b *whereClause[T]) build(ta ormTableAlias) (string, []any) {
    return ta.String() + "." + b.field.String() + " " + b.operator + " ?", b.val
}

func (b *whereRawSqlClause[T]) mustOrmQueryClause() {}
func (b *whereRawSqlClause[T]) build(ta ormTableAlias) (string, []any) {
    return ta.String() + "." + b.field.String() + " " + b.operator + " (" + b.rawSql+ ")", b.val
}

func (b *whereSubQClause[T]) mustOrmQueryClause() {}
func (b *whereSubQClause[T]) build(ta ormTableAlias) (string, []any) {
    query, args := b.subQ.build()
    return ta.String() + "." + b.field.String() + " " + b.operator + " (" + query + ")", args
}

func (b *whereAliasClause[T]) mustOrmQueryClause() {}
func (b *whereAliasClause[T]) build(ta ormTableAlias) (string, []any) {
    return ta.String() + "." + b.field.String()  + "=" + b.alias.String() + "." + b.aliasedField.String(), nil
}

func (b *fieldSetter[T, V]) mustOrmUpdateSetter() {}
func (b *fieldSetter[T, V]) build(ta ormTableAlias) (string, []any) {
    return ta.String() + "." + b.field.String() + " = ?", []any{b.val}
}

func (b *fieldsSubQSetter[T]) mustOrmUpdateSetter() {}
func (b *fieldsSubQSetter[T]) build(ta ormTableAlias) (string, []any) {
    query, args := b.subQ.build()
    return ta.String() + "." + b.field.String() + " = (" + query + ")", args
}

func (b *fieldsRawQSetter[T]) mustOrmUpdateSetter() {}
func (b *fieldsRawQSetter[T]) build(ta ormTableAlias) (string, []any) {
    return ta.String() + "." + b.field.String() + " = (" + b.rawSql+")", b.val
}

{{- range .Structs}}
// -------------------------Where{{.Name}}--------------------------------------------------------------------------------------
{{- $Struct:= .}}


type {{lowerTitle $Struct.Name}}WhereClauseBuilder struct {
    {{ range $idx,$field := .Fields}}
    {{.Name}} *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder
    {{- end}}
}

{{ range $idx,$field := .Fields}}
type {{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder struct {

}
{{- range $action, $sql := .SqlCanAction}}

{{- end}}

func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) SubQ(
operation string,
query ormQuery,
) *whereSubQClause[{{lowerTitle $Struct.Name}}FieldAlias] {
    return &whereSubQClause[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: operation,
        subQ: query,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) Raw(
operation string,
sql string,
args ...any,
) *whereRawSqlClause[{{lowerTitle $Struct.Name}}FieldAlias] {
    return &whereRawSqlClause[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: operation,
        rawSql : sql,
        val: args,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) AliasEq(
alias ormTableAlias,
field ormFieldAlias,
) *whereAliasClause[{{lowerTitle $Struct.Name}}FieldAlias] {
     return &whereAliasClause[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        alias: alias,
        aliasedField: field,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) AliasRawEq(
alias string,
field ormFieldAlias,
) *whereAliasClause[{{lowerTitle $Struct.Name}}FieldAlias] {
     return &whereAliasClause[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        alias: ormTableAliasCast(alias),
        aliasedField: field,
    }
}

{{- range $action, $sql := .SqlCanAction}}
{{- if contains $action "Between" }}
func (b *{{lowerTitle $Struct.Name}}{{$field.Name}}FieldWhereClauseBuilder) {{- camel $action}}(
start {{$field.Type}},
end {{$field.Type}},
) *whereClause[{{lowerTitle $Struct.Name}}FieldAlias]{
    return &whereClause[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: "{{ $sql }}",
        val: []any{start,end},
    }
}
{{- else}}
func (b *{{lowerTitle $Struct.Name}}{{$field.Name}}FieldWhereClauseBuilder) {{- camel $action}}(
val {{$field.Type}},
) *whereClause[{{lowerTitle $Struct.Name}}FieldAlias] {
    return &whereClause[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: "{{ $sql }}",
        val: []any{val},
    }
}
{{- end}}
{{- end}}

{{- end}}

// -------------------------Set{{.Name}}--------------------------------------------------------------------------------------
type {{lowerTitle $Struct.Name}}FieldSetterBuilder struct {
    {{ range $idx,$field := .Fields}}
    {{.Name}} *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder
    {{- end}}
}


{{ range $idx,$field := .Fields}}
type {{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder struct {}

func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder) Set(
val {{$field.Type}},
) *fieldSetter[{{lowerTitle $Struct.Name}}FieldAlias, {{$field.Type}}] {
    return &fieldSetter[{{lowerTitle $Struct.Name}}FieldAlias, {{$field.Type}}]{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        val: val,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder) SubQ(
query ormQuery,
) *fieldsSubQSetter[{{lowerTitle $Struct.Name}}FieldAlias] {
    return &fieldsSubQSetter[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        subQ: query,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder) Raw(
query string,
args ...any,
) *fieldsRawQSetter[{{lowerTitle $Struct.Name}}FieldAlias] {
    return &fieldsRawQSetter[{{lowerTitle $Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        rawSql: query,
        val: args,
    }
}
{{- end}}


{{- end}}

{{end}}
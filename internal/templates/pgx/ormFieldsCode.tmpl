{{define "ormFieldsCodePgx"}}
{{if .BuildTags}}
//go:build {{.BuildTags}}

{{end}}// Code generated by sqlc. DO NOT EDIT.
{{if not .OmitSqlcVersion}}// versions:
//   sqlc {{.SqlcVersion}}
{{end}}
// QO - query object
// QB - query builder
// QC - query clause
// QT - query templater
// FT - field templater
// F - field
// FC - filed clause
// FCB - filed clause builder
// C - clause

package {{.Package}}
{{ if hasImports .SourceName }}
import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{end}}

type ormQuery interface {
    mustImplement()
}

{{range .Structs}}
{{$Struct:= .}}


type must{{$Struct.Name}}Query interface {
    must{{$Struct.Name}}Query()
}

type {{lowerTitle .Name}}QB struct {
    T *{{lowerTitle .Name}}QT
}

func (b *{{lowerTitle .Name}}QB) New() *{{lowerTitle .Name}}QO {
    return &{{lowerTitle .Name}}QO{}
}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle .Name}}QO struct {
    fields      []must{{$Struct.Name}}F
    whereClauses []must{{$Struct.Name}}C
    groupBy     []must{{$Struct.Name}}F
}

func (o *{{lowerTitle .Name}}QO) Fields(query ...must{{$Struct.Name}}F) *{{lowerTitle .Name}}QO {
    o.fields = append(o.fields, query...)
    return o
}

func (o *{{lowerTitle .Name}}QO) Where(query ...must{{$Struct.Name}}C) *{{lowerTitle .Name}}QO {
    o.whereClauses = append(o.whereClauses, query...)
    return o
}

func (o *{{lowerTitle .Name}}QO) GroupBy(query ...must{{$Struct.Name}}F) *{{lowerTitle .Name}}QO {
    o.groupBy = append(o.groupBy, query...)
    return o
}

type (
    must{{$Struct.Name}}C interface {
        must{{$Struct.Name}}C()
    }

    {{lowerTitle $Struct.Name}}OrQC struct {
            must{{$Struct.Name}}C
            left, right *{{lowerTitle .Name}}FC
        }
    {{lowerTitle $Struct.Name}}AndQC struct {
        must{{$Struct.Name}}C
        left, right *{{lowerTitle .Name}}FC
    }

    {{lowerTitle $Struct.Name}}RawQC struct {
        must{{$Struct.Name}}C
        prefix string
        query string
        val []any
    }

    {{lowerTitle $Struct.Name}}SubQC struct {
        must{{$Struct.Name}}C
        prefix string
        query ormQuery
    }

    {{lowerTitle .Name}}QT struct {
         {{- range .Fields}}
            {{.Name}} {{ lowerTitle $Struct.Name }}{{.Name}}FCB
         {{- end}}
         F {{lowerTitle $Struct.Name}}FT
    }
)

func (q *{{lowerTitle $Struct.Name}}QT) Or(left, right *{{lowerTitle $Struct.Name}}FC) *{{lowerTitle $Struct.Name}}OrQC {
    return &{{lowerTitle $Struct.Name}}OrQC{
        left: left,
        right: right,
    }
}

func (q *{{lowerTitle $Struct.Name}}QT) And(left, right *{{lowerTitle $Struct.Name}}FC) *{{lowerTitle $Struct.Name}}AndQC {
    return &{{lowerTitle $Struct.Name}}AndQC{
        left: left,
        right: right,
    }
}

func (q *{{lowerTitle $Struct.Name}}QT) SubQ(prefix string, query ormQuery) *{{lowerTitle $Struct.Name}}SubQC {
    return &{{lowerTitle $Struct.Name}}SubQC{
        prefix: prefix,
        query: query,
    }
}

func (q *{{lowerTitle $Struct.Name}}QT) Raw(prefix string, sql string, args ...any) *{{lowerTitle $Struct.Name}}RawQC {
    return &{{lowerTitle $Struct.Name}}RawQC{
        prefix: prefix,
        query: sql,
        val: args,
    }
}

type (
    must{{$Struct.Name}}F interface {
        must{{$Struct.Name}}F()
    }

    {{lowerTitle $Struct.Name}}F string

    {{lowerTitle $Struct.Name}}FT struct {
    {{ range $idx,$field := .Fields}}
        {{.Name}} {{lowerTitle $Struct.Name}}F
    {{- end}}
    }
)


func (f {{lowerTitle $Struct.Name}}F)  must{{$Struct.Name}}F() {}

const (
{{lowerTitle $Struct.Name}}ALL {{lowerTitle $Struct.Name}}F = "all"
{{ range $idx,$field := .Fields}}
    {{lowerTitle $Struct.Name}}{{.Name}} {{lowerTitle $Struct.Name}}F = "{{dbName $field.Name}}"
{{- end}}
)

type (
    {{ lowerTitle .Name }}FC struct {
        must{{$Struct.Name}}C
        operation string
        field {{ lowerTitle $Struct.Name}}F
        val []any
    }

    {{ lowerTitle .Name }}SubQFC struct {
        must{{$Struct.Name}}C
        operation string
        query ormQuery
    }
    {{ range $idx,$field := .Fields}}
    {{ lowerTitle $Struct.Name }}{{.Name}}FCB struct {}
    {{- end}}
)

{{ range $idx,$field := .Fields}}
{{- range $action, $sql := .SqlCanAction}}
{{- if contains $action "BETWEEN" }}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCB) {{- camel $action}}(start {{$field.Type}},end {{$field.Type}}) *{{ lowerTitle $Struct.Name }}FC {
    return &{{ lowerTitle $Struct.Name }}FC{
        operation: "{{ $sql }}",
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        val: []any{start,end},
    }
}
{{- else}}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCB) {{- camel $action}}(val {{$field.Type}}) *{{ lowerTitle $Struct.Name }}FC {
    return &{{ lowerTitle $Struct.Name }}FC{
        operation: "{{ $sql }}",
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        val: []any{val},
    }
}
{{- end}}
{{- end}}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCB) SubQ(operation string,query ormQuery) *{{ lowerTitle $Struct.Name }}SubQFC {
    return &{{ lowerTitle $Struct.Name }}SubQFC{
        operation: operation,
        query: query,
    }
}

func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCB) Raw(operation string,sql string, args ...any) *{{ lowerTitle $Struct.Name }}FC {
    return &{{ lowerTitle $Struct.Name }}FC{
        field: "{{dbName $field.Name}}",
        operation: fmt.Sprintf("%s %s",operation, sql),
        val: args,
    }
}

{{- end}}

{{end}}

{{end}}
{{define "ormFieldsCodePgx"}}
{{if .BuildTags}}
//go:build {{.BuildTags}}

{{end}}// Code generated by sqlc. DO NOT EDIT.
{{if not .OmitSqlcVersion}}// versions:
//   sqlc {{.SqlcVersion}}
{{end}}
// FT - field templater
// F - field
// FC - filed clause
// FCT - filed clause templater
// FUT - field update templater
// FV - field value

package {{.Package}}
{{ if hasImports .SourceName }}
import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{end}}

type ormQueryClause[T ormFieldAlias] interface {
   mustOrmQueryClause(T)
   build(ta ormTableAlias, paramIndex *int) (string, []any)
}

type ormUpdateSetter[T ormFieldAlias] interface {
    mustOrmUpdateSetter(T)
    build(ta ormTableAlias, paramIndex *int) (string, []any)
}

type ormInsertSetter[T ormFieldAlias] interface {
    mustOrmInsertSetter(T)
    build(ta ormTableAlias, paramIndex *int) (string, any)
}


type (
    whereClause[T ormFieldAlias] struct {
        field T
        operator string
        val []any
    }
    whereFieldRawSqlClause[T ormFieldAlias] struct {
        field T
        operator string
        rawSql string
        val []any
    }
    whereFieldSubQClause[T ormFieldAlias] struct {
        field T
        operator string
        subQ ormQuery
    }
    whereAliasClause[T ormFieldAlias] struct {
        field T
        alias ormTableAlias
        aliasedField ormFieldAlias
    }
    whereAndClause[T ormFieldAlias] struct {
        elems []ormQueryClause[T]
    }
    whereOrClause[T ormFieldAlias] struct {
        elems []ormQueryClause[T]
    }
    whereSubQClause[T ormFieldAlias] struct {
        operator string
        subQ ormQuery
    }
    whereRawSqlClause[T ormFieldAlias] struct {
        operator string
        rawSql string
        val []any
    }


    fieldSetter[T ormFieldAlias] struct {
        field T
        val any
    }
    fieldsSubQSetter[T ormFieldAlias] struct {
        field T
        subQ ormQuery
    }
    fieldsRawQSetter[T ormFieldAlias] struct {
        field T
        rawSql string
        val []any
    }
)

func (b *whereClause[T]) mustOrmQueryClause(T) {}
func (b *whereClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    return ta.String() + "." + b.field.String() + " " + b.operator + " (?)", b.val
}

func (b *whereFieldRawSqlClause[T]) mustOrmQueryClause(T) {}
func (b *whereFieldRawSqlClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    return ta.String() + "." + b.field.String() + " " + b.operator + " (" + b.rawSql+ ")", b.val
}

func (b *whereFieldSubQClause[T]) mustOrmQueryClause(T) {}
func (b *whereFieldSubQClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    query, args := b.subQ.build(paramIndex)
    return ta.String() + "." + b.field.String() + " " + b.operator + " (" + query[:len(query)-1] + ")", args
}

func (b *whereAliasClause[T]) mustOrmQueryClause(T) {}
func (b *whereAliasClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    return ta.String() + "." + b.field.String()  + "=" + b.alias.String() + "." + b.aliasedField.String(), nil
}

func (b *whereAndClause[T]) mustOrmQueryClause(T) {}
func (b *whereAndClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    var args []any
    var exprs []string
    for _, clause := range b.elems {
        clauseSQL, clauseArgs := clause.build(ta, paramIndex)
        exprs = append(exprs, clauseSQL)
        args = append(args, clauseArgs...)
    }
    return "(" + strings.Join(exprs, " AND ") + ")", args
}

func (b *whereOrClause[T]) mustOrmQueryClause(T) {}
func (b *whereOrClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
   var args []any
   var exprs []string
   for _, clause := range b.elems {
       clauseSQL, clauseArgs := clause.build(ta, paramIndex)
       exprs = append(exprs, clauseSQL)
       args = append(args, clauseArgs...)
   }
   return "(" + strings.Join(exprs, " OR ") + ")", args
}

func (b *whereSubQClause[T]) mustOrmQueryClause(T) {}
func (b *whereSubQClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    query, args := b.subQ.build(paramIndex)
    return b.operator + " (" + query[:len(query)-1] + ")", args
}

func (b *whereRawSqlClause[T]) mustOrmQueryClause(T) {}
func (b *whereRawSqlClause[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    return b.operator + " (" + b.rawSql+ ")", b.val
}

func (b *fieldSetter[T]) mustOrmUpdateSetter(T) {}
func (b *fieldSetter[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    return ta.String() + "." + b.field.String() + " = ?", []any{b.val}
}

func (b *fieldsSubQSetter[T]) mustOrmUpdateSetter(T) {}
func (b *fieldsSubQSetter[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    query, args := b.subQ.build(paramIndex)
    return ta.String() + "." + b.field.String() + " = (" + query[:len(query)-1] + ")", args
}

func (b *fieldsRawQSetter[T]) mustOrmUpdateSetter(T) {}
func (b *fieldsRawQSetter[T]) build(ta ormTableAlias, paramIndex *int) (string, []any) {
    return ta.String() + "." + b.field.String() + " = (" + b.rawSql+")", b.val
}

{{- range .Structs}}
// -------------------------Where{{.Name}}--------------------------------------------------------------------------------------
{{- $Struct:= .}}


type {{lowerTitle $Struct.Name}}WhereClauseBuilder struct {
    {{ range $idx,$field := .Fields}}
    {{.Name}} *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder
    {{- end}}
}

func new{{$Struct.Name}}WhereClauseBuilder() *{{lowerTitle $Struct.Name}}WhereClauseBuilder {
    return &{{lowerTitle $Struct.Name}}WhereClauseBuilder{
        {{ range $idx,$field := .Fields}}
        {{.Name}}: &{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder{},
        {{- end}}
    }
}

func (b *{{lowerTitle $Struct.Name}}WhereClauseBuilder) And(
elements ...ormQueryClause[must{{$Struct.Name}}FieldAlias],
) *whereAndClause[must{{$Struct.Name}}FieldAlias] {
    return &whereAndClause[must{{$Struct.Name}}FieldAlias]{
        elems: elements,
    }
}

func (b *{{lowerTitle $Struct.Name}}WhereClauseBuilder) Or(
elements ...ormQueryClause[must{{$Struct.Name}}FieldAlias],
) *whereOrClause[must{{$Struct.Name}}FieldAlias] {
    return &whereOrClause[must{{$Struct.Name}}FieldAlias]{
        elems: elements,
    }
}

func (b *{{lowerTitle $Struct.Name}}WhereClauseBuilder) SubQ(
operation string,
query ormQuery,
) *whereSubQClause[must{{$Struct.Name}}FieldAlias] {
    return &whereSubQClause[must{{$Struct.Name}}FieldAlias]{
        operator: operation,
        subQ: query,
    }
}

func (b *{{lowerTitle $Struct.Name}}WhereClauseBuilder) Raw(
operation string,
sql string,
args ...any,
) ormQueryClause[must{{$Struct.Name}}FieldAlias] {
    return &whereRawSqlClause[must{{$Struct.Name}}FieldAlias]{
        operator: operation,
        rawSql : sql,
        val: args,
    }
}

{{ range $idx,$field := .Fields}}
type {{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder struct {}
{{- range $action, $sql := .SqlCanAction}}

{{- end}}

func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) SubQ(
operation string,
query ormQuery,
) *whereFieldSubQClause[must{{$Struct.Name}}FieldAlias] {
    return &whereFieldSubQClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: operation,
        subQ: query,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) Raw(
operation string,
sql string,
args ...any,
) *whereFieldRawSqlClause[must{{$Struct.Name}}FieldAlias] {
    return &whereFieldRawSqlClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: operation,
        rawSql : sql,
        val: args,
    }
}

func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) AliasEq(
alias ormTableAlias,
field ormFieldAlias,
) *whereAliasClause[must{{$Struct.Name}}FieldAlias] {
     return &whereAliasClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        alias: alias,
        aliasedField: field,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldWhereClauseBuilder) AliasRawEq(
alias string,
field ormFieldAlias,
) *whereAliasClause[must{{$Struct.Name}}FieldAlias] {
     return &whereAliasClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        alias: ormTableAliasCast(alias),
        aliasedField: field,
    }
}

{{- range $action, $sql := .SqlCanAction}}
{{- if contains $action "Between" }}
func (b *{{lowerTitle $Struct.Name}}{{$field.Name}}FieldWhereClauseBuilder) {{- camel $action}}(
start {{$field.Type}},
end {{$field.Type}},
) *whereClause[must{{$Struct.Name}}FieldAlias]{
    return &whereClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: "{{ $sql }}",
        val: []any{start,end},
    }
}
{{else if contains $action "In"}}
func (b *{{lowerTitle $Struct.Name}}{{$field.Name}}FieldWhereClauseBuilder) {{- camel $action}}(
values ...{{$field.Type}},
) *whereClause[must{{$Struct.Name}}FieldAlias] {
    r:=make([]any, len(values))
    for i, v := range values {
        r[i] = v
    }
    return &whereClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: "{{ $sql }}",
        val: r,
    }
}

{{- else}}
func (b *{{lowerTitle $Struct.Name}}{{$field.Name}}FieldWhereClauseBuilder) {{- camel $action}}(
val {{$field.Type}},
) *whereClause[must{{$Struct.Name}}FieldAlias] {
    return &whereClause[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operator: "{{ $sql }}",
        val: []any{val},
    }
}
{{- end}}
{{- end}}

{{- end}}

// -------------------------Set{{.Name}}--------------------------------------------------------------------------------------
type {{lowerTitle $Struct.Name}}FieldSetterBuilder struct {
    {{ range $idx,$field := .Fields}}
    {{.Name}} *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder
    {{- end}}
}

func new{{$Struct.Name}}FieldSetterBuilder() *{{lowerTitle $Struct.Name}}FieldSetterBuilder {
    return &{{lowerTitle $Struct.Name}}FieldSetterBuilder{
        {{ range $idx,$field := .Fields}}
        {{.Name}}: &{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder{},
        {{- end}}
    }
}

{{ range $idx,$field := .Fields}}
type {{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder struct {}

func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder) Set(
val {{$field.Type}},
) *fieldSetter[must{{$Struct.Name}}FieldAlias] {
    return &fieldSetter[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        val: val,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder) SubQ(
query ormQuery,
) *fieldsSubQSetter[must{{$Struct.Name}}FieldAlias] {
    return &fieldsSubQSetter[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        subQ: query,
    }
}
func (b *{{lowerTitle $Struct.Name}}{{.Name}}FieldSetterBuilder) Raw(
query string,
args ...any,
) *fieldsRawQSetter[must{{$Struct.Name}}FieldAlias] {
    return &fieldsRawQSetter[must{{$Struct.Name}}FieldAlias]{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        rawSql: query,
        val: args,
    }
}
{{- end}}

{{- end}}

{{end}}
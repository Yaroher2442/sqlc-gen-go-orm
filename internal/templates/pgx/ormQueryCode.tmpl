{{define "ormQueryCodePgx"}}
{{if .BuildTags}}
//go:build {{.BuildTags}}

{{end}}// Code generated by sqlc. DO NOT EDIT.
{{if not .OmitSqlcVersion}}// versions:
//   sqlc {{.SqlcVersion}}
{{end}}
// QB - query builder
// QC - query clause
// QT - query templater
// UT - update templater
// C - clause
// SQO - select query object
// UQO - update query object
package {{.Package}}
{{ if hasImports .SourceName }}
import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{end}}

type ormQuery interface {
    mustOrmQuery()
    build() (string, []any)
}


{{- range .Structs}}
// -------------------------{{.Name}}--------------------------------------------------------------------------------------

{{- $Struct:= .}}

type {{lowerTitle $Struct.Name}}QueryBuilder struct {
    W *{{lowerTitle $Struct.Name}}WhereClauseBuilder
    S *{{lowerTitle $Struct.Name}}FieldSetterBuilder
    A *{{lowerTitle $Struct.Name}}Aliases
}


func (b *{{lowerTitle $Struct.Name}}QueryBuilder) Select(fields ...{{lowerTitle $Struct.Name}}FieldAlias) *{{lowerTitle $Struct.Name}}SelectQuery{
   if len(fields) == 0 {
        fields = []{{lowerTitle $Struct.Name}}FieldAlias {
             {{- range $idx,$field := .Fields}}
             {{lowerTitle $Struct.Name}}{{.Name}},
             {{- end}}
         }
   }
   return &{{lowerTitle $Struct.Name}}SelectQuery{
       fields: fields,
   }
}
func (b *{{lowerTitle $Struct.Name}}QueryBuilder) Update() *{{lowerTitle $Struct.Name}}UpdateQuery{

}
func (b *{{lowerTitle $Struct.Name}}QueryBuilder) Delete() *{{lowerTitle $Struct.Name}}DeleteQuery{

}
func (b *{{lowerTitle $Struct.Name}}QueryBuilder) Insert() *{{lowerTitle $Struct.Name}}InsertQuery{

}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle $Struct.Name}}SelectQuery struct {
    table          ormTableAliasImpl
    fields         []{{lowerTitle $Struct.Name}}FieldAlias
    alias          ormTableAlias
    distinctFields []{{lowerTitle $Struct.Name}}FieldAlias
    whereClauses   []ormQueryClause[{{lowerTitle $Struct.Name}}FieldAlias]
    groupBy        []{{lowerTitle $Struct.Name}}FieldAlias
    orderByASC     []{{lowerTitle $Struct.Name}}FieldAlias
    orderByDESC    []{{lowerTitle $Struct.Name}}FieldAlias
    limit          int
    offset         int
}


func (*{{lowerTitle $Struct.Name}}SelectQuery) mustOrmQuery()  {}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) build() (string, []any) {
    var sb strings.Builder
    var args []interface{}
    paramIndex := 1

    sb.WriteString("SELECT ")
    if len(q.distinctFields) > 0 {
        sb.WriteString("DISTINCT ")
        for i, dfield := range q.distinctFields {
            if i > 0 {
                sb.WriteString(", ")
            }
            sb.WriteString(dfield.String())
        }
    } else {
        for i, field := range q.distinctFields {
            if i > 0 {
                sb.WriteString(", ")
            }
            sb.WriteString(q.alias.String() + "." + field.String())
        }
    }

    sb.WriteString(string(" FROM " + q.table + " AS "))
    sb.WriteString(q.alias.String())

    if len(q.whereClauses) > 0 {
        sb.WriteString(" WHERE ")
        var whereParts []string
        for _, clause := range q.whereClauses {
            clauseSQL, clauseArgs := clause.build(q.alias)
            for range clauseArgs {
                clauseSQL = strings.Replace(clauseSQL, "?", fmt.Sprintf("$%d", paramIndex), 1)
                paramIndex++
            }
            whereParts = append(whereParts, clauseSQL)
            args = append(args, clauseArgs...)
        }
        sb.WriteString(strings.Join(whereParts, " AND "))
    }

    if len(q.groupBy) > 0 {
        sb.WriteString(" GROUP BY ")
        for i, groupBy := range q.groupBy {
            if i > 0 {
                sb.WriteString(", ")
            }
            sb.WriteString(q.alias.String() + "." +groupBy.String())
        }
    }

    if len(q.orderByASC) > 0 || len(q.orderByDESC) > 0 {
        sb.WriteString(" ORDER BY ")
        first := true
        for _, field := range q.orderByASC {
            if !first {
                sb.WriteString(", ")
            }
            sb.WriteString(q.alias.String() + "." +field.String() + " ASC")
            first = false
        }
        for _, field := range q.orderByDESC {
            if !first {
                sb.WriteString(", ")
            }
            sb.WriteString(q.alias.String() + "." +field.String() + " DESC")
            first = false
        }
    }

    if q.limit > 0 {
        sb.WriteString(" LIMIT ")
        sb.WriteString(fmt.Sprint(q.limit))
    }

    if q.offset > 0 {
        sb.WriteString(" OFFSET ")
        sb.WriteString(fmt.Sprint(q.offset))
    }

    return sb.String(), args
}

func (q *{{lowerTitle $Struct.Name}}SelectQuery) Fields(
fields ...{{lowerTitle $Struct.Name}}FieldAlias,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.fields = fields
    return q
}

func (q *{{lowerTitle $Struct.Name}}SelectQuery) Distinct(
fields ...{{lowerTitle $Struct.Name}}FieldAlias,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.distinctFields = fields
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) Alias(
alias string,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.alias = ormTableAliasCast(alias)
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) Where(
clause ...ormQueryClause[{{lowerTitle $Struct.Name}}FieldAlias],
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.whereClauses = clause
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) GroupBy(
fields ...{{lowerTitle $Struct.Name}}FieldAlias,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.groupBy = fields
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) OrderByASC(
fields ...{{lowerTitle $Struct.Name}}FieldAlias,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.orderByASC = fields
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) OrderByDESC(
fields ...{{lowerTitle $Struct.Name}}FieldAlias,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.orderByDESC = fields
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) Limit(
limit int,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.limit = limit
    return q
}
func (q *{{lowerTitle $Struct.Name}}SelectQuery) Offset(
offset int,
) *{{lowerTitle $Struct.Name}}SelectQuery {
    q.offset = offset
    return q
}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle $Struct.Name}}UpdateQuery struct {

}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle $Struct.Name}}DeleteQuery struct {

}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle $Struct.Name}}InsertQuery struct {

}

{{end}}


{{end}}
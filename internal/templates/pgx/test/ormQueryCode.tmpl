{{define "ormQueryCodePgx"}}
{{if .BuildTags}}
//go:build {{.BuildTags}}

{{end}}// Code generated by sqlc. DO NOT EDIT.
{{if not .OmitSqlcVersion}}// versions:
//   sqlc {{.SqlcVersion}}
{{end}}
// QB - query builder
// QC - query clause
// QT - query templater
// UT - update templater
// C - clause
// SQO - select query object
// UQO - update query object


package {{.Package}}
{{ if hasImports .SourceName }}
import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{end}}

type (
    ormQuery interface {
        mustImplementQuery()
    }
    f interface {
        name()
    }
    c interface {
        sql() (string, []any)
    }
    SQO interface {
        Build() (string, []any, error)
    }
)

{{range .Structs}}
{{$Struct:= .}}


type (
    {{lowerTitle $Struct.Name}}FT struct {
        {{ range $idx,$field := .Fields}}
        {{.Name}} must{{$Struct.Name}}FA
        {{- end}}
    }

    {{lowerTitle $Struct.Name}}UT struct {
        {{- range .Fields}}
            {{.Name}} {{ lowerTitle $Struct.Name }}{{.Name}}FUT
         {{- end}}
    }

    {{lowerTitle .Name}}QT struct {
     {{- range .Fields}}
        {{.Name}} {{ lowerTitle $Struct.Name }}{{.Name}}FCT
     {{- end}}
    }

    {{lowerTitle .Name}}QB struct {
        W *{{lowerTitle .Name}}QT
        F *{{lowerTitle .Name}}FT
        FV *{{lowerTitle .Name}}UT
        TA ormTA
    }

)

func (*{{lowerTitle .Name}}QB) Select() *{{lowerTitle .Name}}SQO {
    return &{{lowerTitle .Name}}SQO{}
}

func (*{{lowerTitle .Name}}QB) Update() *{{lowerTitle .Name}}UQO {
    return &{{lowerTitle .Name}}UQO{}
}

func (*{{lowerTitle .Name}}QB) Delete() *{{lowerTitle .Name}}DQO {
    return &{{lowerTitle .Name}}DQO{}
}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle .Name}}DQO struct {
    alias          ormTA
    whereClauses   []must{{$Struct.Name}}C
    returningFields   []must{{$Struct.Name}}FA
}

func (*{{lowerTitle .Name}}DQO) mustImplementQuery() {}

func (o *{{lowerTitle .Name}}DQO) Alias(alias string) *{{lowerTitle .Name}}DQO {
    o.alias = ormTA(alias)
    return o
}
func (o *{{lowerTitle .Name}}DQO) Where(query ...must{{$Struct.Name}}C) *{{lowerTitle .Name}}DQO {
    o.whereClauses = append(o.whereClauses, query...)
    return o
}

// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle .Name}}UQO struct {
    alias          ormTA
    fields         []must{{$Struct.Name}}FV
    whereClauses   []must{{$Struct.Name}}C
    returningFields   []must{{$Struct.Name}}FA
}

func (*{{lowerTitle .Name}}UQO) mustImplementQuery() {}

func (o *{{lowerTitle .Name}}UQO) Alias(alias string) *{{lowerTitle .Name}}UQO {
    o.alias = ormTA(alias)
    return o
}
func (o *{{lowerTitle .Name}}UQO) Set(query ...must{{$Struct.Name}}FV) *{{lowerTitle .Name}}UQO {
    o.fields = append(o.fields, query...)
    return o
}
func (o *{{lowerTitle .Name}}UQO) Where(query ...must{{$Struct.Name}}C) *{{lowerTitle .Name}}UQO {
    o.whereClauses = append(o.whereClauses, query...)
    return o
}
func (o *{{lowerTitle .Name}}UQO) Returning(fields ...must{{$Struct.Name}}FA) *{{lowerTitle .Name}}UQO {
    o.returningFields = append(o.returningFields, fields...)
    return o
}


// DO NOT SHARE THIS OBJECT BETWEEN GOROUTINES
type {{lowerTitle .Name}}SQO struct {
    alias          ormTA
    distinctFields []must{{$Struct.Name}}FA
    fields         []must{{$Struct.Name}}FA
    whereClauses   []must{{$Struct.Name}}C
    groupBy        []must{{$Struct.Name}}FA
    orderByASC     []must{{$Struct.Name}}FA
    orderByDESC    []must{{$Struct.Name}}FA
    limit          int
    offset         int
}

func (*{{lowerTitle .Name}}SQO) mustImplementQuery() {}

func (o *{{lowerTitle .Name}}SQO) Alias(alias string) *{{lowerTitle .Name}}SQO {
    o.alias = ormTA(alias)
    return o
}
func (o *{{lowerTitle .Name}}SQO) Distinct(fields ...must{{$Struct.Name}}FA) *{{lowerTitle .Name}}SQO {
    o.distinctFields = append(o.distinctFields, fields...)
    return o
}
func (o *{{lowerTitle .Name}}SQO) Fields(query ...must{{$Struct.Name}}FA) *{{lowerTitle .Name}}SQO {
    o.fields = append(o.fields, query...)
    return o
}
func (o *{{lowerTitle .Name}}SQO) Where(query ...must{{$Struct.Name}}C) *{{lowerTitle .Name}}SQO {
    o.whereClauses = append(o.whereClauses, query...)
    return o
}
func (o *{{lowerTitle .Name}}SQO) GroupBy(query ...must{{$Struct.Name}}FA) *{{lowerTitle .Name}}SQO {
    o.groupBy = append(o.groupBy, query...)
    return o
}
func (o *{{lowerTitle .Name}}SQO) Limit(limit int) *{{lowerTitle .Name}}SQO {
    o.limit = limit
    return o
}
func (o *{{lowerTitle .Name}}SQO) Offset(offset int) *{{lowerTitle .Name}}SQO {
    o.offset = offset
    return o
}
func (o *{{lowerTitle .Name}}SQO) OrderByASC(fields ...must{{$Struct.Name}}FA) *{{lowerTitle .Name}}SQO {
    o.orderByASC = append(o.orderByASC, fields...)
    return o
}
func (o *{{lowerTitle .Name}}SQO) OrderByDESC(fields ...must{{$Struct.Name}}FA) *{{lowerTitle .Name}}SQO {
    o.orderByDESC = append(o.orderByDESC, fields...)
    return o
}

type (
    must{{$Struct.Name}}C interface {
        must{{$Struct.Name}}C()
    }

    {{lowerTitle $Struct.Name}}OrQC struct {
            must{{$Struct.Name}}C
            left, right *{{lowerTitle .Name}}FC
        }
    {{lowerTitle $Struct.Name}}AndQC struct {
        must{{$Struct.Name}}C
        left, right *{{lowerTitle .Name}}FC
    }

    {{lowerTitle $Struct.Name}}RawQC struct {
        must{{$Struct.Name}}C
        prefix string
        query string
        val []any
    }

    {{lowerTitle $Struct.Name}}SubQC struct {
        must{{$Struct.Name}}C
        prefix string
        query ormQuery
    }
)

func (q *{{lowerTitle $Struct.Name}}QT) Or(left, right *{{lowerTitle $Struct.Name}}FC) *{{lowerTitle $Struct.Name}}OrQC {
    return &{{lowerTitle $Struct.Name}}OrQC{
        left: left,
        right: right,
    }
}
func (q *{{lowerTitle $Struct.Name}}QT) And(left, right *{{lowerTitle $Struct.Name}}FC) *{{lowerTitle $Struct.Name}}AndQC {
    return &{{lowerTitle $Struct.Name}}AndQC{
        left: left,
        right: right,
    }
}
func (q *{{lowerTitle $Struct.Name}}QT) SubQ(prefix string, query ormQuery) *{{lowerTitle $Struct.Name}}SubQC {
    return &{{lowerTitle $Struct.Name}}SubQC{
        prefix: prefix,
        query: query,
    }
}
func (q *{{lowerTitle $Struct.Name}}QT) Raw(prefix string, sql string, args ...any) *{{lowerTitle $Struct.Name}}RawQC {
    return &{{lowerTitle $Struct.Name}}RawQC{
        prefix: prefix,
        query: sql,
        val: args,
    }
}
{{end}}

{{end}}
{{define "ormFieldsCodePgx"}}
{{if .BuildTags}}
//go:build {{.BuildTags}}

{{end}}// Code generated by sqlc. DO NOT EDIT.
{{if not .OmitSqlcVersion}}// versions:
//   sqlc {{.SqlcVersion}}
{{end}}
// FT - field templater
// F - field
// FC - filed clause
// FCT - filed clause templater
// FUT - field update templater
// FV - field value

package {{.Package}}
{{ if hasImports .SourceName }}
import (
	{{range imports .SourceName}}
	{{range .}}{{.}}
	{{end}}
	{{end}}
)
{{end}}



{{range .Structs}}
{{$Struct:= .}}

type (
    {{ lowerTitle .Name }}FC struct {
        must{{$Struct.Name}}C
        operation string
        field {{ lowerTitle $Struct.Name}}FA
        val []any
    }

    {{ lowerTitle .Name }}SubQFC struct {
        must{{$Struct.Name}}C
        operation string
        query ormQuery
    }

    {{ lowerTitle .Name }}RawFC struct {
        must{{$Struct.Name}}C
        operation string
        field {{ lowerTitle $Struct.Name}}FA
        sql string
        val []any
    }

    {{ lowerTitle .Name }}AliasFC struct {
        must{{$Struct.Name}}C
        field {{ lowerTitle $Struct.Name}}FA
        alias ormTA
        aliasedField ormFA
    }

    {{ range $idx,$field := .Fields}}
    {{ lowerTitle $Struct.Name }}{{.Name}}FCT struct {}
    {{- end}}
)



{{ range $idx,$field := .Fields}}
{{- range $action, $sql := .SqlCanAction}}
{{- if contains $action "BETWEEN" }}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCT) {{- camel $action}}(start {{$field.Type}},end {{$field.Type}}) *{{ lowerTitle $Struct.Name }}FC {
    return &{{ lowerTitle $Struct.Name }}FC{
        operation: "{{ $sql }}",
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        val: []any{start,end},
    }
}
{{- else}}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCT) {{- camel $action}}(val {{$field.Type}}) *{{ lowerTitle $Struct.Name }}FC {
    return &{{ lowerTitle $Struct.Name }}FC{
        operation: "{{ $sql }}",
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        val: []any{val},
    }
}
{{- end}}
{{- end}}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCT) SubQ(operation string,query ormQuery) *{{ lowerTitle $Struct.Name }}SubQFC {
    return &{{ lowerTitle $Struct.Name }}SubQFC{
        operation: operation,
        query: query,
    }
}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCT) Raw(operation string,sql string, args ...any) *{{ lowerTitle $Struct.Name }}RawFC {
    return &{{ lowerTitle $Struct.Name }}RawFC{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        operation: operation,
        sql : sql,
        val: args,
    }
}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCT) AliasEq(alias ormTA, field ormFA) *{{ lowerTitle $Struct.Name }}AliasFC {
     return &{{ lowerTitle $Struct.Name }}AliasFC{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        alias: ormTA(alias),
        aliasedField: field,
    }
}
func (b *{{ lowerTitle $Struct.Name }}{{$field.Name}}FCT) AliasRawEq(alias string, field ormFA) *{{ lowerTitle $Struct.Name }}AliasFC {
     return &{{ lowerTitle $Struct.Name }}AliasFC{
        field: {{lowerTitle $Struct.Name}}{{$field.Name}},
        alias: ormTA(alias),
        aliasedField: field,
    }
}

{{ end}}

type (
    must{{$Struct.Name}}FV interface {
        must{{$Struct.Name}}F()
    }
    {{ lowerTitle .Name }}FV struct {
        must{{$Struct.Name}}FV
        field {{ lowerTitle $Struct.Name}}FA
        val any
    }

    {{ lowerTitle .Name }}SubQFV struct {
        must{{$Struct.Name}}FV
        field {{ lowerTitle $Struct.Name}}FA
        query ormQuery
    }

    {{ lowerTitle .Name }}RawQFV struct {
        must{{$Struct.Name}}FV
        field {{ lowerTitle $Struct.Name}}FA
        query string
        val []any
    }
    {{ range $idx,$field := .Fields}}
    {{ lowerTitle $Struct.Name }}{{.Name}}FUT struct {}
    {{- end}}
)

{{- range $idx,$field := .Fields}}
func (b *{{ lowerTitle $Struct.Name }}{{.Name}}FUT) Set(val {{$field.Type}}) *{{ lowerTitle $Struct.Name }}FV {
    return &{{ lowerTitle $Struct.Name }}FV{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        val: val,
    }
}
func (b *{{ lowerTitle $Struct.Name }}{{.Name}}FUT) SubQ(query ormQuery) *{{ lowerTitle $Struct.Name }}SubQFV {
    return &{{ lowerTitle $Struct.Name }}SubQFV{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        query: query,
    }
}
func (b *{{ lowerTitle $Struct.Name }}{{.Name}}FUT) Raw(query string, args ...any) *{{ lowerTitle $Struct.Name }}RawQFV {
    return &{{ lowerTitle $Struct.Name }}RawQFV{
        field: {{lowerTitle $Struct.Name}}{{.Name}},
        query: query,
        val : args,
    }
}
{{- end}}

{{end}}
{{end}}